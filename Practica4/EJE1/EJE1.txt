https://justpaste.it/f5kf8

A) Las estructuras necesarias para organizar el archivo de alumnos como un arbol B serian: 

const M = 3; // Orden del árbol B 

type 
    TAlumno = record 
        nombre: string[30]; 
        apellido: string[30]; 
        dni: string[8]; 
        legajo: integer; 
        anioIngreso: integer; 
    end; 

    TClave = record 
        valor: integer; // Legajo del alumno o dni
        alumno: TAlumno; 
    end; 

    TNodo = record 
        clave: array[1..2*M-1] of TClave; 
        hijo: array[1..2*M] of ^TNodo; 
        n: integer; // Número de claves en el nodo 
    end; 
    
    TArbolB = ^TNodo;

B) 
RegPersona = 64 bytes
Cada nodo tiene tamaño = 512 bytes
Integer = 4 bytes

¿cuántos registros de persona entrarían en un nodo del árbol B? --> (M-1) = (8-1) = 7
¿Cuál sería el orden del árbol B en este caso (el valor de M)? --> El orden seria = 8

fórmula N = (M-1) * A + M * B + C, donde N es el tamaño del nodo (en bytes), A es el tamaño de un registro 
(en bytes), B es el tamaño de cada enlace a un hijo y C es el tamaño que ocupa el campo referido a la cantidad de claves. 

512 bytes = (M-1) * 64 bytes + M * 4 bytes + 0 bytes
512 bytes = (M-1) * 64 bytes + 4M
512 bytes = 64M - 64 bytes + 4M
512 bytes = 68M - 64 bytes
512 bytes + 64 bytes = 68M
576 bytes / 68 bytes = M
8 bytes = M 

C) El impacto que tiene el valor de M es que cuanto mas grande sea el valor el arbol tendrá un crecimiento a lo ancho
y esto generará que sea mas eficiente en cuanto a la busqueda y recuperacion de datos pero tambien puede aumentar el consumo de memoria,
tambien puede aumentar la complejidad a la hora de insertar o eliminar elementos.
Por otro lado cuando el varlo de M se achica el crecimiento del arbol será más alto y esto generará que ocupe menos memoria pero aumentará
el tiempo de busqueda.

D) Como clave de identificacion seleccionaria un tipo de datos numerico que sea único tal como el DNI o el legajo.

E) La busqueda de un elemento a partir de su numero de legajo en el arbol comienza en el nodo raiz. Si el nodo a encontrar no se encuentra allí
me fijo si el numero que estoy buscando es mayor o menor que el legajo que esta en la raiz, si es menor voy para la izquierda, sino voy a la 
derecha. Asi sucesivamente hasta encontrar el elemento o llegar a un nodo que su puntero indica que no hay mas elementos para buscar.
Si el elemento se encuentra ubicado en el nodo raiz la cantidad de accesos es 1 (MEJOR DE LOS CASOS), en el caso de estar en un nodo terminal 
o que no se encuentre seran requeridos logM *​N, donde M es el orden del árbol y N es el número de nodos en el árbol  (PEOR DE LOS CASOS).

F) No se
